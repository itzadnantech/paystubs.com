<?php

defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . 'libraries/REST_Controller.php';

class Pages extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
    //    $this->methods['pages_get']['limit'] = 500; // 500 requests per hour per user/key
      //  $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
       // $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function index(){
      
    }
    
    public function page_get()
    {
        
       
      
        $pages = [
           1 =>  ['id' => 1, 'page' => 'PrivacyPolicy'],
           2 =>    ['id' => 2, 'page' => 'TermsOfService']
           
        ];

        $id = $this->get('id');

        if ($id === NULL)
        {
           $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
    
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $page = NULL;

        if (!empty($pages) && isset($pages[$id]) && method_exists($this,$pages[$id]['page']))
        {
            $page = $this->$pages[$id]['page']();
        }

        if (!empty($page))
        {
            
            $response = array(
                    'code' => 0, 
                    'message' => 'Successful.',
                    'title' => $page['title'],
                    'content' => $page['content']
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'code' => 1,
                'message' => 'Page could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
    
    function PrivacyPolicy(){
       
       
       $query = $this->db->query("SELECT id,title,content FROM cms WHERE id=1");
       $row = $query->result_array();
      
       return ($row) ? $row[0] : array();

    }
    
    function TermsOfService(){
      $query = $this->db->query("SELECT id,title,content FROM cms WHERE id=2");
       $row = $query->result_array();
      
       return ($row) ? $row[0] : array();
    }


    public function zzzusers_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function zzzusers_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
